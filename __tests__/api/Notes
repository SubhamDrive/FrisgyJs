Notes For Frisby
=================
Frisby is a REST API testing framework built on node.js and Jasmine.

Write Tests
Frisby tests start with frisby.create('Test Title'), where Test Title is a description for this test.

The tests are then followed by one of the HTTP methods (get, post, ..., etc). For example, .get(url) make a GET request to url.

The tests can be chained with expects after the HTTP methods. For example, .expectStatus(200) tests if the response status is 200.

The tests end with .toss() to generate the resulting Jasmine tests.

Many built-in matchers can be used to test HTTP status codes, JSON keys/values, JSON value types and others. Matchers can be found here.


FRISBY DOCUMENTATION
====================
Frisby makes REST API testing easy, fast, and fun. Frisby.js comes loaded with many built-in tools for the most common things you need to test for to ensure your REST API is working as it should, and returning the correct properties, values, and types.
When you need something custom, Frisby.js also provides an easy way to customize and extend assertions to make your job easier, with less repetitive and tedious code.


FRISBY.JS
===========
Setup
==============
The Frisby site has setup instructions but it is quick and easy If you don't already have them installed, install node and npm.
Once those are installed install two npm packages:
* npm install --save-dev frisby
* npm install -g jasmine-node
Fire up your favorite editor and create a new .js file, just be sure the file name ends in "_spec" so jasmine will find it.
Now you are ready to rock and roll testing some API's.


Verbs
=====
Frisby is very intuitive and readable when it comes to using different http verbs. Command line tools like cUrl are powerful but sometimes its a little hard to remember what all the command line parameters mean. All the CRUD operations are available as easy to read method names like, .post, .get, .delete, .put. I think this makes the tests readable and very easy to write.



ex

frisby.create('Frisby Post')
  .addHeader('User-Agent','frisbyJS Test')
  .post('https://www.httpbin.org/post',  {hello: 'world'})
  .expectStatus(200)
  .expectBodyContains('world')
  .toss();



Status Codes and Headers
========================
If you need to set specific headers, you just set them with addHeader. For instance in the example below the GitHub API requires a user agent header. Status codes are also easily verified with the expectStatus method. Nice and readable and easy to use or modify.

frisby.create('Bad Auth expect 401')
  .addHeader('User-Agent','frisbyJS Test')
  .get('https://bad:user@api.github.com/users/vlucas')
  .expectStatus(401)
  .expectJSON({ message: 'Bad credentials', documentation_url: 'https://developer.github.com/v3' })
  .toss();





Multi Step Tests
================
If you tests require multiple http calls Frisby allows you to chain the calls through the .after and .afterJSON methods. These will guarantee that the first request completes before the next call is made. AfterJSON accepts a function that will have the response JSON from the first response passed to it. This makes it really easy to do an authentication request first to capture a token, then use it in later requests. It's also handy for dynamic resources, so you could make a post call and then using the identifier in the response make a get call to verify the resource was created as you expected.

frisby.create('Nested Test Repos ContainsJson Frisby')
.addHeader('User-Agent','frisbyJS Test')
  .get('https://api.github.com/users/vlucas')
   .afterJSON(function(jsonResponse) {
     frisby.create("using response from first request")
          .addHeader('User-Agent','frisbyJS Test')
          .get(jsonResponse.repos_url)
          .expectJSON('?',{name: 'frisby'}) //? in path param searches with an array
          .toss();
   })
.toss();